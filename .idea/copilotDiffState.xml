<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/service/ClientService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/ClientService.java" />
              <option name="originalContent" value="package service;&#10;&#10;import model.Client;&#10;import model.Compte;&#10;import model.TypeCompte;&#10;import model.Transaction;&#10;import model.exceptions.*;&#10;import repository.ClientRepository;&#10;import repository.CompteRepository;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;import java.util.function.Predicate;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClientService {&#10;&#10;    private ClientRepository clientRepository;&#10;    private CompteRepository compteRepository;&#10;&#10;    public ClientService(ClientRepository clientRepository, CompteRepository compteRepository) {&#10;        this.clientRepository = clientRepository;&#10;        this.compteRepository = compteRepository;&#10;    }&#10;&#10;    public Client creerClient(String nom, String prenom, String email, String motDePasse) {&#10;        // Check if email already exists&#10;        if (clientRepository.findByEmail(email).isPresent()) {&#10;            throw new IllegalArgumentException(&quot;Un client avec cet email existe déjà&quot;);&#10;        }&#10;&#10;        Client client = new Client(nom, prenom, email, motDePasse);&#10;        clientRepository.save(client);&#10;        return client;&#10;    }&#10;&#10;    // Create account for client&#10;    public Compte creerCompte(int idClient, TypeCompte typeCompte, BigDecimal soldeInitial) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        if (soldeInitial.compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            throw new MontantInvalideException(&quot;Le solde initial ne peut pas être négatif&quot;);&#10;        }&#10;&#10;        Client client = clientOpt.get();&#10;        Compte compte = new Compte(typeCompte, soldeInitial, new ArrayList&lt;Transaction&gt;(), idClient);&#10;&#10;        client.ajouterCompte(compte);&#10;        compteRepository.save(compte);&#10;        clientRepository.save(client);&#10;&#10;        return compte;&#10;    }&#10;&#10;    // Get client information&#10;    public Optional&lt;Client&gt; obtenirClient(int idClient) {&#10;        return clientRepository.findById(idClient);&#10;    }&#10;&#10;    // Update client information&#10;    public void modifierClient(int idClient, String nom, String prenom, String email) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    // Delete client and all associated accounts&#10;    public void supprimerClient(int idClient) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        Client client = clientOpt.get();&#10;&#10;        // Delete all client's accounts&#10;        for (Compte compte : client.getComptes()) {&#10;            compteRepository.deleteCompte(compte.getIdCompte());&#10;        }&#10;&#10;        clientRepository.deleteById(idClient);&#10;    }&#10;&#10;    // Calculate total balance for all client accounts&#10;    public BigDecimal calculerSoldeTotal(int idClient) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        return clientOpt.get().getComptes().stream()&#10;                .map(Compte::getSolde)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Get all transactions for a client with filtering capabilities&#10;    public List&lt;Transaction&gt; obtenirTransactionsClient(int idClient, Predicate&lt;Transaction&gt; filter) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        return clientOpt.get().getComptes().stream()&#10;                .flatMap(compte -&gt; compte.getTransactions().stream())&#10;                .filter(filter)&#10;                .sorted((t1, t2) -&gt; t2.getDate().compareTo(t1.getDate())) // Sort by date descending&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // Calculate total deposits for client&#10;    public BigDecimal calculerTotalDepots(int idClient) {&#10;        return obtenirTransactionsClient(idClient,&#10;                t -&gt; t.getTypeTransaction().name().equals(&quot;DEPOT&quot;))&#10;                .stream()&#10;                .map(Transaction::getMontant)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Calculate total withdrawals for client&#10;    public BigDecimal calculerTotalRetraits(int idClient) {&#10;        return obtenirTransactionsClient(idClient,&#10;                t -&gt; t.getTypeTransaction().name().equals(&quot;RETRAIT&quot;))&#10;                .stream()&#10;                .map(Transaction::getMontant)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Detect suspicious transactions (high amounts or repetitive operations)&#10;    public List&lt;Transaction&gt; detecterTransactionsSuspectes(int idClient) {&#10;        BigDecimal seuilSuspect = new BigDecimal(&quot;10000&quot;); // Threshold for high amounts&#10;&#10;        return obtenirTransactionsClient(idClient, t -&gt; true)&#10;                .stream()&#10;                .filter(t -&gt; t.getMontant().compareTo(seuilSuspect) &gt; 0)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // List all clients&#10;    public List&lt;Client&gt; listerTousLesClients() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;    // Authenticate client&#10;    public Optional&lt;Client&gt; authentifierClient(String email, String motDePasse) {&#10;        if (&quot;manager&quot;.equals(email) &amp;&amp; &quot;manager&quot;.equals(motDePasse)) {&#10;            // Return a dummy Client object for manager&#10;            return Optional.of(new Client(&quot;Manager&quot;, &quot;&quot;, &quot;manager&quot;, &quot;manager&quot;));&#10;        }&#10;        return clientRepository.findByEmail(email)&#10;                .filter(client -&gt; client.getMotDePasse().equals(motDePasse));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package service;&#10;&#10;import model.Client;&#10;import model.Compte;&#10;import model.TypeCompte;&#10;import model.Transaction;&#10;import model.exceptions.*;&#10;import repository.ClientRepository;&#10;import repository.CompteRepository;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;import java.util.function.Predicate;&#10;import java.util.stream.Collectors;&#10;&#10;public class ClientService {&#10;&#10;    private ClientRepository clientRepository;&#10;    private CompteRepository compteRepository;&#10;&#10;    public ClientService(ClientRepository clientRepository, CompteRepository compteRepository) {&#10;        this.clientRepository = clientRepository;&#10;        this.compteRepository = compteRepository;&#10;    }&#10;&#10;    public Client creerClient(String nom, String prenom, String email, String motDePasse) {&#10;        // Check if email already exists&#10;        if (clientRepository.findByEmail(email).isPresent()) {&#10;            throw new IllegalArgumentException(&quot;Un client avec cet email existe déjà&quot;);&#10;        }&#10;&#10;        Client client = new Client(nom, prenom, email, motDePasse);&#10;        clientRepository.save(client);&#10;        return client;&#10;    }&#10;&#10;    // Create account for client&#10;    public Compte creerCompte(int idClient, TypeCompte typeCompte, BigDecimal soldeInitial) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        if (soldeInitial.compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            throw new MontantInvalideException(&quot;Le solde initial ne peut pas être négatif&quot;);&#10;        }&#10;&#10;        Client client = clientOpt.get();&#10;        Compte compte = new Compte(typeCompte, soldeInitial, new ArrayList&lt;Transaction&gt;(), idClient);&#10;&#10;        client.ajouterCompte(compte);&#10;        compteRepository.save(compte);&#10;        clientRepository.save(client);&#10;&#10;        return compte;&#10;    }&#10;&#10;    // Get client information&#10;    public Optional&lt;Client&gt; obtenirClient(int idClient) {&#10;        return clientRepository.findById(idClient);&#10;    }&#10;&#10;    // Update client information&#10;    public void modifierClient(int idClient, String nom, String prenom, String email) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;    }&#10;&#10;    // Delete client and all associated accounts&#10;    public void supprimerClient(int idClient) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        Client client = clientOpt.get();&#10;&#10;        // Delete all client's accounts&#10;        for (Compte compte : client.getComptes()) {&#10;            compteRepository.deleteCompte(compte.getIdCompte());&#10;        }&#10;&#10;        clientRepository.deleteById(idClient);&#10;    }&#10;&#10;    // Calculate total balance for all client accounts&#10;    public BigDecimal calculerSoldeTotal(int idClient) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        return clientOpt.get().getComptes().stream()&#10;                .map(Compte::getSolde)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Get all transactions for a client with filtering capabilities&#10;    public List&lt;Transaction&gt; obtenirTransactionsClient(int idClient, Predicate&lt;Transaction&gt; filter) {&#10;        Optional&lt;Client&gt; clientOpt = clientRepository.findById(idClient);&#10;        if (!clientOpt.isPresent()) {&#10;            throw new ClientNotFoundException(&quot;Client introuvable&quot;);&#10;        }&#10;&#10;        return clientOpt.get().getComptes().stream()&#10;                .flatMap(compte -&gt; compte.getTransactions().stream())&#10;                .filter(filter)&#10;                .sorted((t1, t2) -&gt; t2.getDate().compareTo(t1.getDate())) // Sort by date descending&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // Calculate total deposits for client&#10;    public BigDecimal calculerTotalDepots(int idClient) {&#10;        return obtenirTransactionsClient(idClient,&#10;                t -&gt; t.getTypeTransaction().name().equals(&quot;DEPOT&quot;))&#10;                .stream()&#10;                .map(Transaction::getMontant)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Calculate total withdrawals for client&#10;    public BigDecimal calculerTotalRetraits(int idClient) {&#10;        return obtenirTransactionsClient(idClient,&#10;                t -&gt; t.getTypeTransaction().name().equals(&quot;RETRAIT&quot;))&#10;                .stream()&#10;                .map(Transaction::getMontant)&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;    }&#10;&#10;    // Detect suspicious transactions (high amounts or repetitive operations)&#10;    public List&lt;Transaction&gt; detecterTransactionsSuspectes(int idClient) {&#10;        BigDecimal seuilSuspect = new BigDecimal(&quot;10000&quot;); // Threshold for high amounts&#10;&#10;        return obtenirTransactionsClient(idClient, t -&gt; true)&#10;                .stream()&#10;                .filter(t -&gt; t.getMontant().compareTo(seuilSuspect) &gt; 0)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // List all clients&#10;    public List&lt;Client&gt; listerTousLesClients() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;    // Authenticate client&#10;    public Optional&lt;Client&gt; authentifierClient(String email, String motDePasse) {&#10;        if (&quot;manager&quot;.equals(email) &amp;&amp; &quot;manager&quot;.equals(motDePasse)) {&#10;            // Return a dummy Client object for manager&#10;            return Optional.of(new Client(&quot;Manager&quot;, &quot;&quot;, &quot;manager&quot;, &quot;manager&quot;));&#10;        }&#10;        return clientRepository.findByEmail(email)&#10;                .filter(client -&gt; client.getMotDePasse().equals(motDePasse));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ui/MenuConsole.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ui/MenuConsole.java" />
              <option name="originalContent" value="package ui;&#10;&#10;import controller.CompteController;&#10;import controller.ClientController;&#10;import model.*;&#10;import model.exceptions.*;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Scanner;&#10;import java.util.UUID;&#10;&#10;public class MenuConsole {&#10;&#10;    private CompteController compteController;&#10;    private ClientController clientController;&#10;    private Scanner scanner;&#10;    private Client clientConnecte;&#10;    private boolean isGestionnaire;&#10;&#10;    public MenuConsole(CompteController compteController, ClientController clientController) {&#10;        this.compteController = compteController;&#10;        this.clientController = clientController;&#10;        this.scanner = new Scanner(System.in);&#10;        this.clientConnecte = null;&#10;        this.isGestionnaire = false;&#10;    }&#10;&#10;    public void afficherMenu() {&#10;        System.out.println(&quot; === SYSTÈME BANCAIRE MAROCAIN ===&quot;);&#10;&#10;        // Authentication first&#10;        if (!authentifier()) {&#10;            System.out.println(&quot;Échec de l'authentification. Au revoir!&quot;);&#10;            return;&#10;        }&#10;&#10;        boolean continuer = true;&#10;        while (continuer) {&#10;            // Show manager menu if manager is logged in&#10;            if (clientConnecte != null &amp;&amp; &quot;manager&quot;.equals(clientConnecte.getEmail())) {&#10;                isGestionnaire = true;&#10;            }&#10;            if (isGestionnaire) {&#10;                continuer = afficherMenuGestionnaire();&#10;            } else {&#10;                continuer = afficherMenuClient();&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;Au revoir!&quot;);&#10;        scanner.close();&#10;    }&#10;&#10;    private boolean authentifier() {&#10;        System.out.println(&quot;\n=== AUTHENTIFICATION ===&quot;);&#10;        System.out.println(&quot;1. Se connecter comme Client&quot;);&#10;        System.out.println(&quot;2. Créer un nouveau compte client&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        switch (choix) {&#10;            case 1:&#10;                return authentifierClient();&#10;            case 2:&#10;                return creerNouveauClient();&#10;            default:&#10;                System.out.println(&quot;Choix invalide!&quot;);&#10;                return false;&#10;        }&#10;    }&#10;&#10;    private boolean authentifierClient() {&#10;        System.out.print(&quot;Email : &quot;);&#10;        String email = scanner.nextLine();&#10;        System.out.print(&quot;Mot de passe : &quot;);&#10;        String motDePasse = scanner.nextLine();&#10;&#10;        Optional&lt;Client&gt; clientOpt = clientController.authentifierClient(email, motDePasse);&#10;        if (clientOpt.isPresent()) {&#10;            clientConnecte = clientOpt.get();&#10;            isGestionnaire = false;&#10;            System.out.println(&quot;Connexion réussie! Bienvenue &quot; + clientConnecte.getPrenom());&#10;            return true;&#10;        } else {&#10;            System.out.println(&quot;Email ou mot de passe incorrect&quot;);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean creerNouveauClient() {&#10;        try {&#10;            System.out.println(&quot;\n=== CRÉATION NOUVEAU CLIENT ===&quot;);&#10;            System.out.print(&quot;Nom : &quot;);&#10;            String nom = scanner.nextLine();&#10;            System.out.print(&quot;Prénom : &quot;);&#10;            String prenom = scanner.nextLine();&#10;            System.out.print(&quot;Email : &quot;);&#10;            String email = scanner.nextLine();&#10;            System.out.print(&quot;Mot de passe : &quot;);&#10;            String motDePasse = scanner.nextLine();&#10;&#10;            Client nouveauClient = clientController.creerClient(nom, prenom, email, motDePasse);&#10;            System.out.println(&quot; Client créé avec succès! ID: &quot; + nouveauClient.getIdClient());&#10;&#10;            // Auto-login after creation&#10;            clientConnecte = nouveauClient;&#10;            isGestionnaire = false;&#10;            return true;&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Erreur lors de la création: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean afficherMenuClient() {&#10;        System.out.println(&quot; === ESPACE CLIENT ===&quot;);&#10;        System.out.println(&quot;Client: &quot; + clientConnecte.getPrenom() + &quot; &quot; + clientConnecte.getNom());&#10;        System.out.println(&quot;1. Consulter mes informations&quot;);&#10;        System.out.println(&quot;2. Voir mes comptes&quot;);&#10;        System.out.println(&quot;3. Créer un nouveau compte&quot;);&#10;        System.out.println(&quot;4. Effectuer un dépôt&quot;);&#10;        System.out.println(&quot;5. Effectuer un retrait&quot;);&#10;        System.out.println(&quot;6. Effectuer un virement&quot;);&#10;        System.out.println(&quot;7. Consulter solde d'un compte&quot;);&#10;        System.out.println(&quot;8. Historique des transactions&quot;);&#10;        System.out.println(&quot;9. Filtrer les transactions&quot;);&#10;        System.out.println(&quot;10. Statistiques personnelles&quot;);&#10;        System.out.println(&quot;11. Détecter transactions suspectes&quot;);&#10;        System.out.println(&quot;0. Se déconnecter&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    clientController.afficherInformationsClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 2:&#10;                    clientController.afficherComptesClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 3:&#10;                    creerCompteClient();&#10;                    break;&#10;                case 4:&#10;                    effectuerDepot();&#10;                    break;&#10;                case 5:&#10;                    effectuerRetrait();&#10;                    break;&#10;                case 6:&#10;                    effectuerVirement();&#10;                    break;&#10;                case 7:&#10;                    consulterSolde();&#10;                    break;&#10;                case 8:&#10;                    afficherHistorique();&#10;                    break;&#10;                case 9:&#10;                    menuFiltrerTransactions();&#10;                    break;&#10;                case 10:&#10;                    clientController.afficherStatistiquesClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 11:&#10;                    clientController.detecterTransactionsSuspectes(clientConnecte.getIdClient());&#10;                    break;&#10;                case 0:&#10;                    return false;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private boolean afficherMenuGestionnaire() {&#10;        System.out.println(&quot;\n‍ === ESPACE GESTIONNAIRE ===&quot;);&#10;        System.out.println(&quot;1. Lister tous les clients&quot;);&#10;        System.out.println(&quot;2. Créer un nouveau client&quot;);&#10;        System.out.println(&quot;3. Supprimer un client&quot;);&#10;        System.out.println(&quot;4. Gérer les comptes d'un client&quot;);&#10;        System.out.println(&quot;5. Effectuer opération sur compte&quot;);&#10;        System.out.println(&quot;6. Consulter transactions d'un client&quot;);&#10;        System.out.println(&quot;7. Détecter transactions suspectes&quot;);&#10;        System.out.println(&quot;8. Rapports et statistiques&quot;);&#10;        System.out.println(&quot;0. Se déconnecter&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    listerTousLesClients();&#10;                    break;&#10;                case 2:&#10;                    creerClientGestionnaire();&#10;                    break;&#10;                case 3:&#10;                    supprimerClient();&#10;                    break;&#10;                case 4:&#10;                    gererComptesClient();&#10;                    break;&#10;                case 5:&#10;                    menuOperationsGestionnaire();&#10;                    break;&#10;                case 6:&#10;                    consulterTransactionsClient();&#10;                    break;&#10;                case 7:&#10;                    detecterTransactionsSuspectesTousClients();&#10;                    break;&#10;                case 8:&#10;                    menuRapports();&#10;                    break;&#10;                case 0:&#10;                    return false;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    // Client Methods&#10;    private void creerCompteClient() {&#10;        System.out.println(&quot;\n=== CRÉER UN NOUVEAU COMPTE ===&quot;);&#10;        System.out.println(&quot;Types de compte disponibles:&quot;);&#10;        System.out.println(&quot;1. COURANT&quot;);&#10;        System.out.println(&quot;2. ÉPARGNE&quot;);&#10;        System.out.println(&quot;3. DÉPÔT À TERME&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choixType = obtenirChoixInt();&#10;        TypeCompte typeCompte;&#10;&#10;        switch (choixType) {&#10;            case 1: typeCompte = TypeCompte.COURANT; break;&#10;            case 2: typeCompte = TypeCompte.EPARGNE; break;&#10;            case 3: typeCompte = TypeCompte.DEPOT_A_TERME; break;&#10;            default:&#10;                System.out.println(&quot;Type de compte invalide!&quot;);&#10;                return;&#10;        }&#10;&#10;        System.out.print(&quot;Solde initial (minimum 0 €) : &quot;);&#10;        BigDecimal soldeInitial = obtenirMontant();&#10;&#10;        try {&#10;            Compte nouveauCompte = clientController.creerCompte(clientConnecte.getIdClient(), typeCompte, soldeInitial);&#10;            System.out.println(&quot; Compte créé avec succès!&quot;);&#10;            System.out.println(&quot;ID du compte: &quot; + nouveauCompte.getIdCompte());&#10;            System.out.println(&quot;Type: &quot; + nouveauCompte.getTypeCompte());&#10;            System.out.println(&quot;Solde initial: &quot; + nouveauCompte.getSolde() + &quot; €&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur lors de la création: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Manager Methods&#10;    private void listerTousLesClients() {&#10;        List&lt;Client&gt; clients = clientController.listerTousLesClients();&#10;        System.out.println(&quot;\n=== LISTE DES CLIENTS ===&quot;);&#10;        if (clients.isEmpty()) {&#10;            System.out.println(&quot;Aucun client enregistré.&quot;);&#10;        } else {&#10;            for (Client client : clients) {&#10;                System.out.println(&quot;ID: &quot; + client.getIdClient() +&#10;                                 &quot; | Nom: &quot; + client.getNom() + &quot; &quot; + client.getPrenom() +&#10;                                 &quot; | Email: &quot; + client.getEmail() +&#10;                                 &quot; | Comptes: &quot; + client.getComptes().size());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void creerClientGestionnaire() {&#10;        System.out.println(&quot;\n=== CRÉER NOUVEAU CLIENT ===&quot;);&#10;        System.out.print(&quot;Nom : &quot;);&#10;        String nom = scanner.nextLine();&#10;        System.out.print(&quot;Prénom : &quot;);&#10;        String prenom = scanner.nextLine();&#10;        System.out.print(&quot;Email : &quot;);&#10;        String email = scanner.nextLine();&#10;        System.out.print(&quot;Mot de passe : &quot;);&#10;        String motDePasse = scanner.nextLine();&#10;&#10;        try {&#10;            Client client = clientController.creerClient(nom, prenom, email, motDePasse);&#10;            System.out.println(&quot; Client créé avec succès! ID: &quot; + client.getIdClient());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void supprimerClient() {&#10;        System.out.print(&quot;ID du client à supprimer : &quot;);&#10;        try {&#10;            int idClient = Integer.parseInt(scanner.nextLine());&#10;            clientController.supprimerClient(idClient);&#10;            System.out.println(&quot; Client supprimé avec succès.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Utility Methods&#10;    private int choisirCompteClient() {&#10;        clientController.afficherComptesClient(clientConnecte.getIdClient());&#10;        System.out.print(&quot;ID du compte : &quot;);&#10;        try {&#10;            return Integer.parseInt(scanner.nextLine());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;ID de compte invalide!&quot;);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private void afficherListeTransactions(List&lt;Transaction&gt; transactions, String titre) {&#10;        System.out.println(&quot;\n=== &quot; + titre + &quot; ===&quot;);&#10;        if (transactions.isEmpty()) {&#10;            System.out.println(&quot;Aucune transaction trouvée.&quot;);&#10;        } else {&#10;            for (Transaction t : transactions) {&#10;                System.out.println(&quot;Type: &quot; + t.getTypeTransaction() +&#10;                                 &quot; | Montant: &quot; + t.getMontant() + &quot;€&quot; +&#10;                                 &quot; | Date: &quot; + t.getDate() +&#10;                                 &quot; | Motif: &quot; + t.getMotif());&#10;            }&#10;        }&#10;    }&#10;&#10;    private int obtenirChoixInt() {&#10;        try {&#10;            int choix = scanner.nextInt();&#10;            scanner.nextLine(); // Consume newline&#10;            return choix;&#10;        } catch (Exception e) {&#10;            scanner.nextLine(); // Clear invalid input&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private BigDecimal obtenirMontant() {&#10;        try {&#10;            BigDecimal montant = scanner.nextBigDecimal();&#10;            scanner.nextLine(); // Consume newline&#10;            return montant;&#10;        } catch (Exception e) {&#10;            scanner.nextLine(); // Clear invalid input&#10;            return BigDecimal.ZERO;&#10;        }&#10;    }&#10;&#10;    // Basic operations (existing methods enhanced)&#10;    private void effectuerDepot() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        System.out.print(&quot;Montant à déposer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.deposer(idCompte, montant);&#10;        System.out.println(&quot;Dépôt effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void effectuerRetrait() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        System.out.print(&quot;Montant à retirer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.retirer(idCompte, montant);&#10;        System.out.println(&quot;Retrait effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void effectuerVirement() {&#10;        System.out.println(&quot;=== VIREMENT ===&quot;);&#10;        int idCompteSource = choisirCompteClient();&#10;        if (idCompteSource &lt;= 0) return;&#10;&#10;        System.out.print(&quot;ID du compte destination : &quot;);&#10;        int idCompteDestination;&#10;        try {&#10;            idCompteDestination = Integer.parseInt(scanner.nextLine());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ ID de compte destination invalide!&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.print(&quot;Montant à virer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.virer(idCompteSource, idCompteDestination, montant);&#10;        System.out.println(&quot;Virement effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void consulterSolde() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        compteController.afficherSolde(idCompte);&#10;    }&#10;&#10;    private void afficherHistorique() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        compteController.afficherHistorique(idCompte);&#10;    }&#10;&#10;    private void menuFiltrerTransactions() {&#10;        System.out.println(&quot;\n=== FILTRER LES TRANSACTIONS ===&quot;);&#10;        System.out.println(&quot;1. Par type de transaction&quot;);&#10;        System.out.println(&quot;2. Par montant&quot;);&#10;        System.out.println(&quot;3. Par date&quot;);&#10;        System.out.println(&quot;4. Trier par montant&quot;);&#10;        System.out.println(&quot;5. Trier par date&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    filtrerParType(idCompte);&#10;                    break;&#10;                case 2:&#10;                    filtrerParMontant(idCompte);&#10;                    break;&#10;                case 3:&#10;                    filtrerParDate(idCompte);&#10;                    break;&#10;                case 4:&#10;                    trierParMontant(idCompte);&#10;                    break;&#10;                case 5:&#10;                    trierParDate(idCompte);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void filtrerParType(int idCompte) {&#10;        System.out.println(&quot;Types de transaction:&quot;);&#10;        System.out.println(&quot;1. DÉPÔT&quot;);&#10;        System.out.println(&quot;2. RETRAIT&quot;);&#10;        System.out.println(&quot;3. VIREMENT&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choixType = obtenirChoixInt();&#10;        TypeTransaction type;&#10;&#10;        switch (choixType) {&#10;            case 1: type = TypeTransaction.DEPOT; break;&#10;            case 2: type = TypeTransaction.RETRAIT; break;&#10;            case 3: type = TypeTransaction.VIREMENT; break;&#10;            default:&#10;                System.out.println(&quot;Type invalide!&quot;);&#10;                return;&#10;        }&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParType(idCompte, type);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS &quot; + type);&#10;    }&#10;&#10;    private void filtrerParMontant(int idCompte) {&#10;        System.out.print(&quot;Montant minimum : &quot;);&#10;        BigDecimal montantMin = obtenirMontant();&#10;        System.out.print(&quot;Montant maximum : &quot;);&#10;        BigDecimal montantMax = obtenirMontant();&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParMontant(idCompte, montantMin, montantMax);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS ENTRE &quot; + montantMin + &quot;€ ET &quot; + montantMax + &quot;€&quot;);&#10;    }&#10;&#10;    private void filtrerParDate(int idCompte) {&#10;        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;        try {&#10;            System.out.print(&quot;Date début (dd/MM/yyyy) : &quot;);&#10;            java.time.LocalDate dateDebut = java.time.LocalDate.parse(scanner.nextLine(), formatter);&#10;            System.out.print(&quot;Date fin (dd/MM/yyyy) : &quot;);&#10;            java.time.LocalDate dateFin = java.time.LocalDate.parse(scanner.nextLine(), formatter);&#10;&#10;            List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParDate(idCompte, dateDebut, dateFin);&#10;            afficherListeTransactions(transactions, &quot;TRANSACTIONS DU &quot; + dateDebut + &quot; AU &quot; + dateFin);&#10;&#10;        } catch (java.time.format.DateTimeParseException e) {&#10;            System.out.println(&quot; Format de date invalide! Utilisez dd/MM/yyyy&quot;);&#10;        }&#10;    }&#10;&#10;    private void trierParMontant(int idCompte) {&#10;        System.out.print(&quot;Ordre croissant? (o/n) : &quot;);&#10;        boolean croissant = scanner.nextLine().toLowerCase().startsWith(&quot;o&quot;);&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.trierTransactionsParMontant(idCompte, croissant);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS TRIÉES PAR MONTANT&quot;);&#10;    }&#10;&#10;    private void trierParDate(int idCompte) {&#10;        System.out.print(&quot;Ordre croissant? (o/n) : &quot;);&#10;        boolean croissant = scanner.nextLine().toLowerCase().startsWith(&quot;o&quot;);&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.trierTransactionsParDate(idCompte, croissant);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS TRIÉES PAR DATE&quot;);&#10;    }&#10;&#10;    // Placeholder methods for manager features&#10;    private void gererComptesClient() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void menuOperationsGestionnaire() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void consulterTransactionsClient() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void detecterTransactionsSuspectesTousClients() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void menuRapports() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ui;&#10;&#10;import controller.CompteController;&#10;import controller.ClientController;&#10;import model.*;&#10;import model.exceptions.*;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Scanner;&#10;import java.util.UUID;&#10;&#10;public class MenuConsole {&#10;&#10;    private CompteController compteController;&#10;    private ClientController clientController;&#10;    private Scanner scanner;&#10;    private Client clientConnecte;&#10;    private boolean isGestionnaire;&#10;&#10;    public MenuConsole(CompteController compteController, ClientController clientController) {&#10;        this.compteController = compteController;&#10;        this.clientController = clientController;&#10;        this.scanner = new Scanner(System.in);&#10;        this.clientConnecte = null;&#10;        this.isGestionnaire = false;&#10;    }&#10;&#10;    public void afficherMenu() {&#10;        System.out.println(&quot; === SYSTÈME BANCAIRE MAROCAIN ===&quot;);&#10;&#10;        // Authentication first&#10;        if (!authentifier()) {&#10;            System.out.println(&quot;Échec de l'authentification. Au revoir!&quot;);&#10;            return;&#10;        }&#10;&#10;        boolean continuer = true;&#10;        while (continuer) {&#10;            // Show manager menu if manager is logged in&#10;            if (clientConnecte != null &amp;&amp; &quot;manager&quot;.equals(clientConnecte.getEmail())) {&#10;                isGestionnaire = true;&#10;            }&#10;            if (isGestionnaire) {&#10;                continuer = afficherMenuGestionnaire();&#10;            } else {&#10;                continuer = afficherMenuClient();&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;Au revoir!&quot;);&#10;        scanner.close();&#10;    }&#10;&#10;    private boolean authentifier() {&#10;        System.out.println(&quot;\n=== AUTHENTIFICATION ===&quot;);&#10;        System.out.println(&quot;1. Se connecter comme Client&quot;);&#10;        System.out.println(&quot;2. Créer un nouveau compte client&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        switch (choix) {&#10;            case 1:&#10;                return authentifierClient();&#10;            case 2:&#10;                return creerNouveauClient();&#10;            default:&#10;                System.out.println(&quot;Choix invalide!&quot;);&#10;                return false;&#10;        }&#10;    }&#10;&#10;    private boolean authentifierClient() {&#10;        System.out.print(&quot;Email : &quot;);&#10;        String email = scanner.nextLine();&#10;        System.out.print(&quot;Mot de passe : &quot;);&#10;        String motDePasse = scanner.nextLine();&#10;&#10;        Optional&lt;Client&gt; clientOpt = clientController.authentifierClient(email, motDePasse);&#10;        if (clientOpt.isPresent()) {&#10;            clientConnecte = clientOpt.get();&#10;            isGestionnaire = false;&#10;            System.out.println(&quot;Connexion réussie! Bienvenue &quot; + clientConnecte.getPrenom());&#10;            return true;&#10;        } else {&#10;            System.out.println(&quot;Email ou mot de passe incorrect&quot;);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean creerNouveauClient() {&#10;        try {&#10;            System.out.println(&quot;\n=== CRÉATION NOUVEAU CLIENT ===&quot;);&#10;            System.out.print(&quot;Nom : &quot;);&#10;            String nom = scanner.nextLine();&#10;            System.out.print(&quot;Prénom : &quot;);&#10;            String prenom = scanner.nextLine();&#10;            System.out.print(&quot;Email : &quot;);&#10;            String email = scanner.nextLine();&#10;            System.out.print(&quot;Mot de passe : &quot;);&#10;            String motDePasse = scanner.nextLine();&#10;&#10;            Client nouveauClient = clientController.creerClient(nom, prenom, email, motDePasse);&#10;            System.out.println(&quot; Client créé avec succès! ID: &quot; + nouveauClient.getIdClient());&#10;&#10;            // Auto-login after creation&#10;            clientConnecte = nouveauClient;&#10;            isGestionnaire = false;&#10;            return true;&#10;&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Erreur lors de la création: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    private boolean afficherMenuClient() {&#10;        System.out.println(&quot; === ESPACE CLIENT ===&quot;);&#10;        System.out.println(&quot;Client: &quot; + clientConnecte.getPrenom() + &quot; &quot; + clientConnecte.getNom());&#10;        System.out.println(&quot;1. Consulter mes informations&quot;);&#10;        System.out.println(&quot;2. Voir mes comptes&quot;);&#10;        System.out.println(&quot;3. Créer un nouveau compte&quot;);&#10;        System.out.println(&quot;4. Effectuer un dépôt&quot;);&#10;        System.out.println(&quot;5. Effectuer un retrait&quot;);&#10;        System.out.println(&quot;6. Effectuer un virement&quot;);&#10;        System.out.println(&quot;7. Consulter solde d'un compte&quot;);&#10;        System.out.println(&quot;8. Historique des transactions&quot;);&#10;        System.out.println(&quot;9. Filtrer les transactions&quot;);&#10;        System.out.println(&quot;10. Statistiques personnelles&quot;);&#10;        System.out.println(&quot;11. Détecter transactions suspectes&quot;);&#10;        System.out.println(&quot;0. Se déconnecter&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    clientController.afficherInformationsClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 2:&#10;                    clientController.afficherComptesClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 3:&#10;                    creerCompteClient();&#10;                    break;&#10;                case 4:&#10;                    effectuerDepot();&#10;                    break;&#10;                case 5:&#10;                    effectuerRetrait();&#10;                    break;&#10;                case 6:&#10;                    effectuerVirement();&#10;                    break;&#10;                case 7:&#10;                    consulterSolde();&#10;                    break;&#10;                case 8:&#10;                    afficherHistorique();&#10;                    break;&#10;                case 9:&#10;                    menuFiltrerTransactions();&#10;                    break;&#10;                case 10:&#10;                    clientController.afficherStatistiquesClient(clientConnecte.getIdClient());&#10;                    break;&#10;                case 11:&#10;                    clientController.detecterTransactionsSuspectes(clientConnecte.getIdClient());&#10;                    break;&#10;                case 0:&#10;                    return false;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private boolean afficherMenuGestionnaire() {&#10;        System.out.println(&quot;\n‍ === ESPACE GESTIONNAIRE ===&quot;);&#10;        System.out.println(&quot;1. Lister tous les clients&quot;);&#10;        System.out.println(&quot;2. Créer un nouveau client&quot;);&#10;        System.out.println(&quot;3. Supprimer un client&quot;);&#10;        System.out.println(&quot;4. Gérer les comptes d'un client&quot;);&#10;        System.out.println(&quot;5. Effectuer opération sur compte&quot;);&#10;        System.out.println(&quot;6. Consulter transactions d'un client&quot;);&#10;        System.out.println(&quot;7. Détecter transactions suspectes&quot;);&#10;        System.out.println(&quot;8. Rapports et statistiques&quot;);&#10;        System.out.println(&quot;0. Se déconnecter&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    listerTousLesClients();&#10;                    break;&#10;                case 2:&#10;                    creerClientGestionnaire();&#10;                    break;&#10;                case 3:&#10;                    supprimerClient();&#10;                    break;&#10;                case 4:&#10;                    gererComptesClient();&#10;                    break;&#10;                case 5:&#10;                    menuOperationsGestionnaire();&#10;                    break;&#10;                case 6:&#10;                    consulterTransactionsClient();&#10;                    break;&#10;                case 7:&#10;                    detecterTransactionsSuspectesTousClients();&#10;                    break;&#10;                case 8:&#10;                    menuRapports();&#10;                    break;&#10;                case 0:&#10;                    return false;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    // Client Methods&#10;    private void creerCompteClient() {&#10;        System.out.println(&quot;\n=== CRÉER UN NOUVEAU COMPTE ===&quot;);&#10;        System.out.println(&quot;Types de compte disponibles:&quot;);&#10;        System.out.println(&quot;1. COURANT&quot;);&#10;        System.out.println(&quot;2. ÉPARGNE&quot;);&#10;        System.out.println(&quot;3. DÉPÔT À TERME&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choixType = obtenirChoixInt();&#10;        TypeCompte typeCompte;&#10;&#10;        switch (choixType) {&#10;            case 1: typeCompte = TypeCompte.COURANT; break;&#10;            case 2: typeCompte = TypeCompte.EPARGNE; break;&#10;            case 3: typeCompte = TypeCompte.DEPOT_A_TERME; break;&#10;            default:&#10;                System.out.println(&quot;Type de compte invalide!&quot;);&#10;                return;&#10;        }&#10;&#10;        System.out.print(&quot;Solde initial (minimum 0 €) : &quot;);&#10;        BigDecimal soldeInitial = obtenirMontant();&#10;&#10;        try {&#10;            Compte nouveauCompte = clientController.creerCompte(clientConnecte.getIdClient(), typeCompte, soldeInitial);&#10;            System.out.println(&quot; Compte créé avec succès!&quot;);&#10;            System.out.println(&quot;ID du compte: &quot; + nouveauCompte.getIdCompte());&#10;            System.out.println(&quot;Type: &quot; + nouveauCompte.getTypeCompte());&#10;            System.out.println(&quot;Solde initial: &quot; + nouveauCompte.getSolde() + &quot; €&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur lors de la création: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Manager Methods&#10;    private void listerTousLesClients() {&#10;        List&lt;Client&gt; clients = clientController.listerTousLesClients();&#10;        System.out.println(&quot;\n=== LISTE DES CLIENTS ===&quot;);&#10;        if (clients.isEmpty()) {&#10;            System.out.println(&quot;Aucun client enregistré.&quot;);&#10;        } else {&#10;            for (Client client : clients) {&#10;                System.out.println(&quot;ID: &quot; + client.getIdClient() +&#10;                                 &quot; | Nom: &quot; + client.getNom() + &quot; &quot; + client.getPrenom() +&#10;                                 &quot; | Email: &quot; + client.getEmail() +&#10;                                 &quot; | Comptes: &quot; + client.getComptes().size());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void creerClientGestionnaire() {&#10;        System.out.println(&quot;\n=== CRÉER NOUVEAU CLIENT ===&quot;);&#10;        System.out.print(&quot;Nom : &quot;);&#10;        String nom = scanner.nextLine();&#10;        System.out.print(&quot;Prénom : &quot;);&#10;        String prenom = scanner.nextLine();&#10;        System.out.print(&quot;Email : &quot;);&#10;        String email = scanner.nextLine();&#10;        System.out.print(&quot;Mot de passe : &quot;);&#10;        String motDePasse = scanner.nextLine();&#10;&#10;        try {&#10;            Client client = clientController.creerClient(nom, prenom, email, motDePasse);&#10;            System.out.println(&quot; Client créé avec succès! ID: &quot; + client.getIdClient());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot; Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void supprimerClient() {&#10;        System.out.print(&quot;ID du client à supprimer : &quot;);&#10;        try {&#10;            int idClient = Integer.parseInt(scanner.nextLine());&#10;            clientController.supprimerClient(idClient);&#10;            System.out.println(&quot; Client supprimé avec succès.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // Utility Methods&#10;    private int choisirCompteClient() {&#10;        clientController.afficherComptesClient(clientConnecte.getIdClient());&#10;        System.out.print(&quot;ID du compte : &quot;);&#10;        try {&#10;            return Integer.parseInt(scanner.nextLine());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;ID de compte invalide!&quot;);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private void afficherListeTransactions(List&lt;Transaction&gt; transactions, String titre) {&#10;        System.out.println(&quot;\n=== &quot; + titre + &quot; ===&quot;);&#10;        if (transactions.isEmpty()) {&#10;            System.out.println(&quot;Aucune transaction trouvée.&quot;);&#10;        } else {&#10;            for (Transaction t : transactions) {&#10;                System.out.println(&quot;Type: &quot; + t.getTypeTransaction() +&#10;                                 &quot; | Montant: &quot; + t.getMontant() + &quot;€&quot; +&#10;                                 &quot; | Date: &quot; + t.getDate() +&#10;                                 &quot; | Motif: &quot; + t.getMotif());&#10;            }&#10;        }&#10;    }&#10;&#10;    private int obtenirChoixInt() {&#10;        try {&#10;            int choix = scanner.nextInt();&#10;            scanner.nextLine(); // Consume newline&#10;            return choix;&#10;        } catch (Exception e) {&#10;            scanner.nextLine(); // Clear invalid input&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    private BigDecimal obtenirMontant() {&#10;        try {&#10;            BigDecimal montant = scanner.nextBigDecimal();&#10;            scanner.nextLine(); // Consume newline&#10;            return montant;&#10;        } catch (Exception e) {&#10;            scanner.nextLine(); // Clear invalid input&#10;            return BigDecimal.ZERO;&#10;        }&#10;    }&#10;&#10;    // Basic operations (existing methods enhanced)&#10;    private void effectuerDepot() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        System.out.print(&quot;Montant à déposer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.deposer(idCompte, montant);&#10;        System.out.println(&quot;Dépôt effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void effectuerRetrait() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        System.out.print(&quot;Montant à retirer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.retirer(idCompte, montant);&#10;        System.out.println(&quot;Retrait effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void effectuerVirement() {&#10;        System.out.println(&quot;=== VIREMENT ===&quot;);&#10;        int idCompteSource = choisirCompteClient();&#10;        if (idCompteSource &lt;= 0) return;&#10;&#10;        System.out.print(&quot;ID du compte destination : &quot;);&#10;        int idCompteDestination;&#10;        try {&#10;            idCompteDestination = Integer.parseInt(scanner.nextLine());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ ID de compte destination invalide!&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.print(&quot;Montant à virer : &quot;);&#10;        BigDecimal montant = obtenirMontant();&#10;&#10;        compteController.virer(idCompteSource, idCompteDestination, montant);&#10;        System.out.println(&quot;Virement effectué avec succès!&quot;);&#10;    }&#10;&#10;    private void consulterSolde() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        compteController.afficherSolde(idCompte);&#10;    }&#10;&#10;    private void afficherHistorique() {&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        compteController.afficherHistorique(idCompte);&#10;    }&#10;&#10;    private void menuFiltrerTransactions() {&#10;        System.out.println(&quot;\n=== FILTRER LES TRANSACTIONS ===&quot;);&#10;        System.out.println(&quot;1. Par type de transaction&quot;);&#10;        System.out.println(&quot;2. Par montant&quot;);&#10;        System.out.println(&quot;3. Par date&quot;);&#10;        System.out.println(&quot;4. Trier par montant&quot;);&#10;        System.out.println(&quot;5. Trier par date&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choix = obtenirChoixInt();&#10;        int idCompte = choisirCompteClient();&#10;        if (idCompte &lt;= 0) return;&#10;&#10;        try {&#10;            switch (choix) {&#10;                case 1:&#10;                    filtrerParType(idCompte);&#10;                    break;&#10;                case 2:&#10;                    filtrerParMontant(idCompte);&#10;                    break;&#10;                case 3:&#10;                    filtrerParDate(idCompte);&#10;                    break;&#10;                case 4:&#10;                    trierParMontant(idCompte);&#10;                    break;&#10;                case 5:&#10;                    trierParDate(idCompte);&#10;                    break;&#10;                default:&#10;                    System.out.println(&quot;Choix invalide!&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;❌ Erreur : &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void filtrerParType(int idCompte) {&#10;        System.out.println(&quot;Types de transaction:&quot;);&#10;        System.out.println(&quot;1. DÉPÔT&quot;);&#10;        System.out.println(&quot;2. RETRAIT&quot;);&#10;        System.out.println(&quot;3. VIREMENT&quot;);&#10;        System.out.print(&quot;Votre choix : &quot;);&#10;&#10;        int choixType = obtenirChoixInt();&#10;        TypeTransaction type;&#10;&#10;        switch (choixType) {&#10;            case 1: type = TypeTransaction.DEPOT; break;&#10;            case 2: type = TypeTransaction.RETRAIT; break;&#10;            case 3: type = TypeTransaction.VIREMENT; break;&#10;            default:&#10;                System.out.println(&quot;Type invalide!&quot;);&#10;                return;&#10;        }&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParType(idCompte, type);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS &quot; + type);&#10;    }&#10;&#10;    private void filtrerParMontant(int idCompte) {&#10;        System.out.print(&quot;Montant minimum : &quot;);&#10;        BigDecimal montantMin = obtenirMontant();&#10;        System.out.print(&quot;Montant maximum : &quot;);&#10;        BigDecimal montantMax = obtenirMontant();&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParMontant(idCompte, montantMin, montantMax);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS ENTRE &quot; + montantMin + &quot;€ ET &quot; + montantMax + &quot;€&quot;);&#10;    }&#10;&#10;    private void filtrerParDate(int idCompte) {&#10;        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;        try {&#10;            System.out.print(&quot;Date début (dd/MM/yyyy) : &quot;);&#10;            java.time.LocalDate dateDebut = java.time.LocalDate.parse(scanner.nextLine(), formatter);&#10;            System.out.print(&quot;Date fin (dd/MM/yyyy) : &quot;);&#10;            java.time.LocalDate dateFin = java.time.LocalDate.parse(scanner.nextLine(), formatter);&#10;&#10;            List&lt;Transaction&gt; transactions = compteController.filtrerTransactionsParDate(idCompte, dateDebut, dateFin);&#10;            afficherListeTransactions(transactions, &quot;TRANSACTIONS DU &quot; + dateDebut + &quot; AU &quot; + dateFin);&#10;&#10;        } catch (java.time.format.DateTimeParseException e) {&#10;            System.out.println(&quot; Format de date invalide! Utilisez dd/MM/yyyy&quot;);&#10;        }&#10;    }&#10;&#10;    private void trierParMontant(int idCompte) {&#10;        System.out.print(&quot;Ordre croissant? (o/n) : &quot;);&#10;        boolean croissant = scanner.nextLine().toLowerCase().startsWith(&quot;o&quot;);&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.trierTransactionsParMontant(idCompte, croissant);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS TRIÉES PAR MONTANT&quot;);&#10;    }&#10;&#10;    private void trierParDate(int idCompte) {&#10;        System.out.print(&quot;Ordre croissant? (o/n) : &quot;);&#10;        boolean croissant = scanner.nextLine().toLowerCase().startsWith(&quot;o&quot;);&#10;&#10;        List&lt;Transaction&gt; transactions = compteController.trierTransactionsParDate(idCompte, croissant);&#10;        afficherListeTransactions(transactions, &quot;TRANSACTIONS TRIÉES PAR DATE&quot;);&#10;    }&#10;&#10;    // Placeholder methods for manager features&#10;    private void gererComptesClient() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void menuOperationsGestionnaire() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void consulterTransactionsClient() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void detecterTransactionsSuspectesTousClients() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;&#10;    private void menuRapports() {&#10;        System.out.println(&quot; Fonctionnalité en développement...&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>